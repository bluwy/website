import fs from 'node:fs/promises'
import satori from 'satori'
import { html } from 'satori-html'
import { Resvg } from '@resvg/resvg-js'

const postsDir = new URL('../src/posts/', import.meta.url)
const postsOgOutDir = new URL('../static/blog/', import.meta.url)

const sourceSans3Regular = await fs.readFile(
  new URL('./SourceSans3-Regular.ttf', import.meta.url)
)
const sourceSans3Semibold = await fs.readFile(
  new URL('./SourceSans3-SemiBold.ttf', import.meta.url)
)

for (const postFile of await fs.readdir(postsDir)) {
  if (postFile.startsWith('.')) continue

  const [, postDate, postName] = postFile.match(/(\d{4}-\d{2}-\d{2})-(.+)/)
  if (!postDate || !postName) {
    throw new Error(`Invalid post file name: ${postFile}`)
  }

  const postOgOutFile = new URL(`${postName}.png`, postsOgOutDir)
  if (await fs.stat(postOgOutFile).catch(() => false)) {
    console.log(`Skipping existing: ${postOgOutFile}`)
    continue
  }

  const postFileMdContent = await fs.readFile(
    new URL(`${postFile}/index.md`, postsDir),
    'utf8'
  )
  const postTitle = postFileMdContent.match(/title: (.+)$/m)?.[1]

  console.log('Generating OG image for', postFile)

  const svg = await getOgImageSvg(postTitle, formatDate(new Date(postDate)))
  const resvg = new Resvg(svg)
  const pngData = resvg.render()
  const pngBuffer = pngData.asPng()

  await fs.mkdir(postsOgOutDir, { recursive: true })
  await fs.writeFile(postOgOutFile, pngBuffer)
}

/**
 * @param {string} title
 * @param {string} date
 */
async function getOgImageSvg(title, date) {
  const template = html`
    <div
      style="display: flex; flex-direction: column; justify-content: space-between; background-color: #18031a; background-image: url("data:image/svg+xml,%3Csvg width='63' height='66' viewBox='0 0 42 44' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg id='brick-wall' fill='%23ffffff' fill-opacity='0.12'%3E%3Cpath d='M0 0h42v44H0V0zm1 1h40v20H1V1zM0 23h20v20H0V23zm22 0h20v20H22V23z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E"); color: rgb(243, 244, 246); padding: 80px; padding-top: 110px; padding-bottom: 120px; height: 100%;"
    >
      <div style="font-size: 68px; line-height: 1; font-weight: bold;">${title}</div>
      <div style="display: flex; justify-content: space-between;">
        <div style="font-size: 32px; line-height: 1;">${date}</div>
        <div style="display:flex; font-size: 32px; line-height: 1;">
          <svg style="margin-top: 5px; margin-right: 8px;" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 8.467 8.467"><path d="M4.233.265c-.29 0-.578.11-.8.332L.596 3.435a1.13 1.13 0 000 1.598L3.434 7.87a1.13 1.13 0 001.598 0L7.87 5.033a1.13 1.13 0 000-1.598L5.032.597c-.22-.22-.5-.332-.8-.332zm0 1.323a.75.75 0 01.532.221L6.658 3.7a.75.75 0 010 1.065L4.766 6.658a.75.75 0 01-1.065 0L1.81 4.766a.75.75 0 010-1.065L3.7 1.81a.75.75 0 01.532-.221zm0 1.323a.378.378 0 00-.266.11l-.946.946a.374.374 0 000 .532l.946.946a.374.374 0 00.532 0l.946-.946a.374.374 0 000-.532L4.5 3.02a.374.374 0 00-.266-.11z" fill="#ff9faf"/></svg>
          Bjorn Lu
        </div>
      </div>
    </div>
  `

  const svg = await satori(template, {
    width: 1200,
    height: 630,
    fonts: [
      {
        name: 'Source Sans 3',
        data: sourceSans3Regular,
        weight: 400,
        style: 'normal'
      },
      {
        name: 'Source Sans 3',
        data: sourceSans3Semibold,
        weight: 600,
        style: 'normal'
      }
    ]
  })

  const prettySvg = svg.replace(
    '</svg>',
    `\
${getGlowLineSvg('blue', 'x="-25" y="20" width="500" height="150"')}
${getGlowLineSvg('pink', 'x="40" y="465" width="200" height="150"')}
${getGlowLineSvg('blue', 'x="722" y="465" width="500" height="150"')}
${getGlowLineSvg('pink', 'x="962" y="20" width="200" height="150"')}
</svg>
  `
  )

  return prettySvg
}

// `box-shadow: 0 0 2px #fe13cd, inset 0 0 2px #fe13cd, 0 0 10px #fe13cd, inset 0 0 10px #fe13cd, 0 0 36px #fe13cd, inset 0 0 36px #fe13cd`
// but in SVG, generated by Figma. I have no idea what's going on.
/**
 * @param {'pink' | 'blue'} color
 * @param {string} attrs
 * @returns
 */
function getGlowLineSvg(color, attrs) {
  const lineColor = color === 'pink' ? '#FFC4F3' : '#CBFDFF'
  const colorMatrix =
    color === 'pink'
      ? '0 0 0 0 0.996078 0 0 0 0 0.0745098 0 0 0 0 0.803922 0 0 0 1 0'
      : '0 0 0 0 0.176471 0 0 0 0 0.960784 0 0 0 0 1 0 0 0 1 0'

  return `\
<svg ${attrs} preserveAspectRatio="none" viewBox="0 0 172 78" fill="none" xmlns="http://www.w3.org/2000/svg">
  <g filter="url(#filter-${color})">
    <rect x="36" y="36" width="100" height="6" rx="2" fill="${lineColor}"/>
  </g>
  <defs>
    <filter id="filter-${color}" x="0" y="0" width="172" height="78" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
      <feFlood flood-opacity="0" result="BackgroundImageFix"/>
      <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
      <feOffset/>
      <feGaussianBlur stdDeviation="18"/>
      <feComposite in2="hardAlpha" operator="out"/>
      <feColorMatrix type="matrix" values="${colorMatrix}"/>
      <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_3_18"/>
      <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
      <feOffset/>
      <feGaussianBlur stdDeviation="18"/>
      <feComposite in2="hardAlpha" operator="out"/>
      <feColorMatrix type="matrix" values="${colorMatrix}"/>
      <feBlend mode="normal" in2="effect1_dropShadow_3_18" result="effect2_dropShadow_3_18"/>
      <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
      <feOffset/>
      <feGaussianBlur stdDeviation="5"/>
      <feComposite in2="hardAlpha" operator="out"/>
      <feColorMatrix type="matrix" values="${colorMatrix}"/>
      <feBlend mode="normal" in2="effect2_dropShadow_3_18" result="effect3_dropShadow_3_18"/>
      <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
      <feOffset/>
      <feGaussianBlur stdDeviation="1"/>
      <feComposite in2="hardAlpha" operator="out"/>
      <feColorMatrix type="matrix" values="${colorMatrix}"/>
      <feBlend mode="normal" in2="effect3_dropShadow_3_18" result="effect4_dropShadow_3_18"/>
      <feBlend mode="normal" in="SourceGraphic" in2="effect4_dropShadow_3_18" result="shape"/>
    </filter>
  </defs>
</svg>`
}

/**
 * @param {Date} date
 */
function formatDate(date) {
  // Force English since the site is only available in English
  return date.toLocaleDateString('en-MY', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}
